"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
クトゥルフ神話TRPG キャラクターシートモデルのテスト
"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])

from django.test import TestCase
from django.core.exceptions import ValidationError
from django.contrib.auth import get_user_model
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)

User = get_user_model()


class CharacterSheetTestCase(TestCase):
    """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])キャラクターシート基本テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
    
    def setUp(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])テスト用データセットアップ"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
    
    def test_create_6th_edition_character(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])6版キャラクター作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        character = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='テスト探索者6版',
            age=25,
            str_value=70,
            con_value=60,
            pow_value=65,
            dex_value=75,
            app_value=50,
            siz_value=55,
            int_value=80,
            edu_value=70
        )
        
        # 基本確認
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        
        # 派生ステータス自動計算確認
        self.assertEqual(character.hit_points_max, 11)  # (60+55)/10 = 11
        self.assertEqual(character.magic_points_max, 13)  # 65/5 = 13
        self.assertEqual(character.sanity_starting, 65)  # POW = 65
        
        # 能力値プロパティテスト
        abilities = character.abilities
        self.assertEqual(abilities['str'], 70)
        self.assertEqual(abilities['int'], 80)
    
    def test_create_7th_edition_character(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版キャラクター作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        character = CharacterSheet.objects.create(
            user=self.user,
            edition='7th',
            name='テスト探索者7版',
            age=30,
            str_value=60,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=65,
            siz_value=50,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.hit_points_max, 12)  # (70+50)/10 = 12
        self.assertEqual(character.magic_points_max, 15)  # 75/5 = 15
    
    def test_ability_value_validation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])能力値バリデーションテスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        # 正常な値
        character = CharacterSheet(
            user=self.user,
            edition='6th',
            name='バリデーションテスト',
            age=25,
            str_value=70,
            con_value=60,
            pow_value=65,
            dex_value=75,
            app_value=50,
            siz_value=55,
            int_value=80,
            edu_value=70,
            # 必須フィールドを追加
            hit_points_max=11,
            hit_points_current=11,
            magic_points_max=13,
            magic_points_current=13,
            sanity_starting=65,
            sanity_max=65,
            sanity_current=65
        )
        character.full_clean()  # バリデーション実行
        
        # 範囲外の値（最小値未満）
        character.str_value = 10
        with self.assertRaises(ValidationError):
            character.full_clean()
        
        # 範囲外の値（最大値超過）
        character.str_value = 95
        with self.assertRaises(ValidationError):
            character.full_clean()
    
    def test_character_versioning(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])キャラクターバージョン管理テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        # オリジナルキャラクター作成
        original = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='バージョンテスト',
            age=25,
            str_value=70,
            con_value=60,
            pow_value=65,
            dex_value=75,
            app_value=50,
            siz_value=55,
            int_value=80,
            edu_value=70
        )
        
        # バージョン2作成
        version2 = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='バージョンテスト',
            age=26,
            str_value=75,  # 成長
            con_value=60,
            pow_value=65,
            dex_value=75,
            app_value=50,
            siz_value=55,
            int_value=80,
            edu_value=72,  # 成長
            version=2,
            parent_sheet=original
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(original.versions.count(), 1)


class CharacterSheet6thTestCase(TestCase):
    """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])6版固有機能テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
    
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser6th',
            email='test6th@example.com',
            password='testpass123'
        )
        
        self.character = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='6版テストキャラ',
            age=25,
            str_value=70,
            con_value=60,
            pow_value=65,
            dex_value=75,
            app_value=50,
            siz_value=55,
            int_value=80,
            edu_value=70
        )
    
    def test_6th_edition_calculations(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])6版固有計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        sixth_data = CharacterSheet6th.objects.create(
            character_sheet=self.character,
            mental_disorder='テスト障害'
        )
        
        # アイデアロール = INT × 5
        self.assertEqual(sixth_data.idea_roll, 400)  # 80 × 5
        
        # 幸運ロール = POW × 5
        self.assertEqual(sixth_data.luck_roll, 325)  # 65 × 5
        
        # 知識ロール = EDU × 5
        self.assertEqual(sixth_data.know_roll, 350)  # 70 × 5
    
    def test_6th_damage_bonus_calculation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])6版ダメージボーナス計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        sixth_data = CharacterSheet6th.objects.create(
            character_sheet=self.character
        )
        
        # STR 70 + SIZ 55 = 125 -> +1d4
        self.assertEqual(sixth_data.damage_bonus, '+1d4')
        
        # 境界値テスト
        self.character.str_value = 32
        self.character.siz_value = 32  # 合計64
        self.character.save()
        
        sixth_data.save()  # 再計算
        self.assertEqual(sixth_data.damage_bonus, '-1d4')


class CharacterSheet7thTestCase(TestCase):
    """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版固有機能テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
    
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser7th',
            email='test7th@example.com',
            password='testpass123'
        )
        
        self.character = CharacterSheet.objects.create(
            user=self.user,
            edition='7th',
            name='7版テストキャラ',
            age=30,
            str_value=60,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=65,
            siz_value=50,
            int_value=85,
            edu_value=80
        )
    
    def test_7th_edition_calculations(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版固有計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        seventh_data = CharacterSheet7th.objects.create(
            character_sheet=self.character,
            luck_points=60
        )
        
        # ビルド = STR 60 + SIZ 50 = 110 -> 0
        self.assertEqual(seventh_data.build_value, 0)
        
        # 回避 = DEX / 2 = 80 / 2 = 40
        self.assertEqual(seventh_data.dodge_value, 40)
        
        # ダメージボーナス（ビルド0）
        self.assertEqual(seventh_data.damage_bonus, '+0')
    
    def test_7th_build_calculation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版ビルド計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        seventh_data = CharacterSheet7th.objects.create(
            character_sheet=self.character,
            luck_points=60
        )
        
        # 様々なビルド値テスト
        test_cases = [
            (30, 30, -2),  # 60 -> -2
            (40, 40, -1),  # 80 -> -1
            (60, 60, 0),   # 120 -> 0
            (80, 80, 1),   # 160 -> 1
            (90, 90, 2),   # 180 -> 2
        ]
        
        for str_val, siz_val, expected_build in test_cases:
            self.character.str_value = str_val
            self.character.siz_value = siz_val
            self.character.save()
            
            seventh_data.save()  # 再計算
            self.assertEqual(seventh_data.build_value, expected_build,
                           f"STR {str_val} + SIZ {siz_val} should give build {expected_build}")
    
    def test_7th_move_rate_calculation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版移動力計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        seventh_data = CharacterSheet7th.objects.create(
            character_sheet=self.character,
            luck_points=60
        )
        
        # 基本（30歳、STR 60 < SIZ 50は偽、DEX 80 > SIZ 50は真）-> 8 + 1 = 9
        self.assertEqual(seventh_data.move_rate, 9)
        
        # 年齢による減少テスト
        self.character.age = 45  # 40代 -> -1
        self.character.save()
        seventh_data.save()
        self.assertEqual(seventh_data.move_rate, 8)  # 8 - 1 + 1 = 8
        
        # 両方の条件（STR & DEX < SIZ）
        self.character.str_value = 40
        self.character.dex_value = 40
        self.character.siz_value = 80
        self.character.save()
        seventh_data.save()
        self.assertEqual(seventh_data.move_rate, 6)  # 8 - 1 - 1 = 6


class CharacterSkillTestCase(TestCase):
    """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])キャラクタースキルテスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
    
    def setUp(self):
        self.user = User.objects.create_user(
            username='skilltest',
            email='skill@example.com',
            password='testpass123'
        )
        
        self.character_6th = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='スキルテスト6版',
            age=25,
            str_value=70, con_value=60, pow_value=65, dex_value=75,
            app_value=50, siz_value=55, int_value=80, edu_value=70
        )
        
        self.character_7th = CharacterSheet.objects.create(
            user=self.user,
            edition='7th',
            name='スキルテスト7版',
            age=30,
            str_value=60, con_value=70, pow_value=75, dex_value=80,
            app_value=65, siz_value=50, int_value=85, edu_value=80
        )
    
    def test_skill_calculation_6th(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])6版スキル計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        skill = CharacterSkill.objects.create(
            character_sheet=self.character_6th,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=15,
            other_points=5
        )
        
        # 現在値 = 25 + 40 + 15 + 5 = 85
        self.assertEqual(skill.current_value, 85)
        
        # 6版では half_value, fifth_value は計算されない（デフォルト0）
        self.assertEqual(skill.half_value, 0)
        self.assertEqual(skill.fifth_value, 0)
    
    def test_skill_calculation_7th(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版スキル計算テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        skill = CharacterSkill.objects.create(
            character_sheet=self.character_7th,
            skill_name='図書館',
            base_value=20,
            occupation_points=60,
            interest_points=10,
            other_points=0
        )
        
        # 現在値 = 20 + 60 + 10 + 0 = 90
        self.assertEqual(skill.current_value, 90)
        
        # 7版では half_value, fifth_value を計算
        self.assertEqual(skill.half_value, 45)  # 90 / 2
        self.assertEqual(skill.fifth_value, 18)  # 90 / 5
    
    def test_skill_unique_constraint(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])スキル名のユニーク制約テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        # 最初のスキル作成
        CharacterSkill.objects.create(
            character_sheet=self.character_6th,
            skill_name='図書館',
            base_value=25,
            occupation_points=40
        )
        
        # 同じキャラクターシートに同じスキル名で作成しようとすると失敗
        with self.assertRaises(Exception):
            CharacterSkill.objects.create(
                character_sheet=self.character_6th,
                skill_name='図書館',
                base_value=25,
                occupation_points=40
            )


class CharacterEquipmentTestCase(TestCase):
    """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])キャラクター装備テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
    
    def setUp(self):
        self.user = User.objects.create_user(
            username='equiptest',
            email='equip@example.com',
            password='testpass123'
        )
        
        self.character = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='装備テストキャラ',
            age=25,
            str_value=70, con_value=60, pow_value=65, dex_value=75,
            app_value=50, siz_value=55, int_value=80, edu_value=70
        )
    
    def test_weapon_creation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])武器作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        weapon = CharacterEquipment.objects.create(
            character_sheet=self.character,
            item_type='weapon',
            name='.38口径リボルバー',
            skill_name='拳銃',
            damage='1d10',
            base_range='15m',
            attacks_per_round=1,
            ammo=6,
            malfunction_number=100
        )
        
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(weapon.name, '.38口径リボルバー')
        self.assertEqual(weapon.damage, '1d10')
        self.assertEqual(weapon.ammo, 6)
    
    def test_armor_creation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])防具作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        armor = CharacterEquipment.objects.create(
            character_sheet=self.character,
            item_type='armor',
            name='革ジャケット',
            armor_points=1,
            description='軽量な革製ジャケット'
        )
        
        self.assertEqual(armor.item_type, 'armor')
        self.assertEqual(armor.armor_points, 1)
    
    def test_item_creation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])アイテム作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        item = CharacterEquipment.objects.create(
            character_sheet=self.character,
            item_type='item',
            name='懐中電灯',
            description='LED懐中電灯',
            quantity=1
        )
        
        self.assertEqual(item.item_type, 'item')
        self.assertEqual(item.quantity, 1)


class CharacterSheetIntegrationTestCase(TestCase):
    """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])キャラクターシート統合テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
    
    def setUp(self):
        self.user = User.objects.create_user(
            username='integration',
            email='integration@example.com',
            password='testpass123'
        )
    
    def test_complete_6th_character_creation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])6版キャラクター完全作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        # 基本キャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user,
            edition='6th',
            name='統合テスト探索者',
            age=28,
            str_value=70, con_value=65, pow_value=60, dex_value=75,
            app_value=55, siz_value=60, int_value=80, edu_value=75
        )
        
        # 6版固有データ作成
        sixth_data = CharacterSheet6th.objects.create(
            character_sheet=character,
            mental_disorder='軽度の不眠症'
        )
        
        # スキル追加
        skills = [
            ('図書館', 25, 40, 10),
            ('目星', 25, 50, 0),
            ('拳銃', 20, 40, 0),
        ]
        
        for skill_name, base, occupation, interest in skills:
            CharacterSkill.objects.create(
                character_sheet=character,
                skill_name=skill_name,
                base_value=base,
                occupation_points=occupation,
                interest_points=interest
            )
        
        # 装備追加
        CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='.38口径リボルバー',
            skill_name='拳銃',
            damage='1d10',
            ammo=6
        )
        
        # 検証
        self.assertEqual(character.skills.count(), 3)
        self.assertEqual(character.equipment.count(), 1)
        self.assertTrue(hasattr(character, 'sixth_edition_data'))
        self.assertEqual(sixth_data.idea_roll, 400)  # INT 80 × 5
    
    def test_complete_7th_character_creation(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])7版キャラクター完全作成テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        # 基本キャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user,
            edition='7th',
            name='7版統合テスト',
            age=32,
            str_value=55, con_value=70, pow_value=75, dex_value=70,
            app_value=80, siz_value=50, int_value=85, edu_value=80
        )
        
        # 7版固有データ作成
        seventh_data = CharacterSheet7th.objects.create(
            character_sheet=character,
            luck_points=65,
            personal_description='テスト用の詳細な背景設定'
        )
        
        # スキル追加（7版は半分値・1/5値も計算される）
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='心理学',
            base_value=10,
            occupation_points=50,
            interest_points=20
        )
        
        # 検証
        self.assertEqual(skill.current_value, 80)  # 10+50+20
        self.assertEqual(skill.half_value, 40)     # 80/2
        self.assertEqual(skill.fifth_value, 16)    # 80/5
        self.assertEqual(seventh_data.build_value, 0)  # STR 55 + SIZ 50 = 105 -> 0 (85-124の範囲)
        self.assertEqual(seventh_data.dodge_value, 35)   # DEX 70 / 2 = 35
    
    def test_character_deletion_cascade(self):
        """
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])キャラクター削除時のカスケード削除テスト"""
キャラクターシート機能の統合テスト

このテストでは以下の機能を検証します：
- キャラクターシートのCRUD操作
- バージョン管理機能
- 権限制御（参照は全ユーザ、編集は作成者のみ）
- Web ビューの動作
- API エンドポイントの動作
"""

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from accounts.models import (
    CharacterSheet, CharacterSheet6th, CharacterSheet7th,
    CharacterSkill, CharacterEquipment
)
import json

User = get_user_model()


class CharacterSheetModelTestCase(TestCase):
    """キャラクターシートモデルのテスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='testuser1',
            password='testpass123',
            nickname='テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='testuser2',
            password='testpass123',
            nickname='テストユーザー2'
        )
    
    def test_character_sheet_creation_6th(self):
        """6版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='テスト探索者6版',
            player_name='テストプレイヤー',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.assertEqual(character.edition, '6th')
        self.assertEqual(character.name, 'テスト探索者6版')
        self.assertEqual(character.version, 1)
        self.assertIsNone(character.parent_sheet)
        self.assertTrue(character.is_active)
        
        # 自動計算値の確認
        expected_hp = (character.con_value + character.siz_value) // 10
        expected_mp = character.pow_value // 5
        self.assertEqual(character.hit_points_max, expected_hp)
        self.assertEqual(character.magic_points_max, expected_mp)
    
    def test_character_sheet_creation_7th(self):
        """7版キャラクターシート作成テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='テスト探索者7版',
            player_name='テストプレイヤー',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
        
        self.assertEqual(character.edition, '7th')
        self.assertEqual(character.name, 'テスト探索者7版')
        self.assertEqual(character.version, 1)
    
    def test_version_creation(self):
        """バージョン作成テスト"""
        # 元のキャラクターシートを作成
        original = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # バージョン2を作成
        version2 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='オリジナル探索者',
            age=26,  # 年齢を変更
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80,
            parent_sheet=original,
            version=2
        )
        
        self.assertEqual(version2.version, 2)
        self.assertEqual(version2.parent_sheet, original)
        self.assertEqual(version2.age, 26)
        
        # オリジナルのバージョンリストに含まれることを確認
        versions = original.versions.all()
        self.assertIn(version2, versions)
    
    def test_character_skills(self):
        """キャラクター技能テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='技能テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 技能を追加
        skill = CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=25,
            occupation_points=40,
            interest_points=10,
            other_points=0,
            current_value=75
        )
        
        self.assertEqual(skill.character_sheet, character)
        self.assertEqual(skill.current_value, 75)
        self.assertEqual(character.skills.count(), 1)
    
    def test_character_equipment(self):
        """キャラクター装備テスト"""
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='装備テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        # 武器を追加
        weapon = CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='weapon',
            name='ピストル',
            damage='1d10',
            range='15m',
            ammo=6,
            description='小型拳銃'
        )
        
        self.assertEqual(weapon.character_sheet, character)
        self.assertEqual(weapon.item_type, 'weapon')
        self.assertEqual(character.equipment.count(), 1)


class CharacterSheetAPITestCase(APITestCase):
    """キャラクターシートAPI統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='apiuser1',
            password='testpass123',
            nickname='APIユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='apiuser2',
            password='testpass123',
            nickname='APIユーザー2'
        )
        
        self.client = APIClient()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='APIテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='APIテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_api_public_access(self):
        """キャラクター一覧API - 全ユーザアクセステスト"""
        # user1でログイン
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertGreaterEqual(len(data), 2)  # user1とuser2のキャラクター両方が見える
        
        # キャラクター名を確認
        character_names = [char['name'] for char in data]
        self.assertIn('APIテスト探索者1', character_names)
        self.assertIn('APIテスト探索者2', character_names)
    
    def test_character_detail_api_public_access(self):
        """キャラクター詳細API - 他ユーザーのキャラクター参照テスト"""
        # user1でuser2のキャラクターを参照
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.get(f'/api/accounts/character-sheets/{self.character2.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'APIテスト探索者2')
        self.assertEqual(data['edition'], '7th')
    
    def test_character_edit_permission_denied(self):
        """キャラクター編集API - 他ユーザーのキャラクター編集拒否テスト"""
        # user1でuser2のキャラクターを編集しようとする
        self.client.force_authenticate(user=self.user1)
        
        update_data = {
            'name': '変更された名前',
            'age': 35
        }
        
        response = self.client.patch(
            f'/api/accounts/character-sheets/{self.character2.id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_character_creation_api(self):
        """キャラクター作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        character_data = {
            'edition': '7th',
            'name': '新規作成探索者',
            'player_name': '新規プレイヤー',
            'age': 28,
            'gender': '女性',
            'occupation': '学者',
            'str_value': 55,
            'con_value': 60,
            'pow_value': 80,
            'dex_value': 75,
            'app_value': 70,
            'siz_value': 50,
            'int_value': 90,
            'edu_value': 85
        }
        
        response = self.client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['name'], '新規作成探索者')
        self.assertEqual(data['edition'], '7th')
        self.assertEqual(data['age'], 28)
        
        # データベースに保存されているか確認
        created_character = CharacterSheet.objects.get(id=data['id'])
        self.assertEqual(created_character.user, self.user1)
    
    def test_version_creation_api(self):
        """バージョン作成APIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        response = self.client.post(f'/api/accounts/character-sheets/{self.character1.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        data = response.json()
        self.assertEqual(data['version'], 2)
        self.assertEqual(data['parent_sheet'], self.character1.id)
        self.assertEqual(data['name'], self.character1.name)
    
    def test_edition_filter_api(self):
        """版別フィルタリングAPIテスト"""
        self.client.force_authenticate(user=self.user1)
        
        # 6版のみ取得
        response = self.client.get('/api/accounts/character-sheets/by_edition/?edition=6th')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        for character in data:
            self.assertEqual(character['edition'], '6th')
    
    def test_unauthenticated_access_denied(self):
        """未認証アクセス拒否テスト"""
        response = self.client.get('/api/accounts/character-sheets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)


class CharacterSheetWebViewTestCase(TestCase):
    """キャラクターシートWebビュー統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='webuser1',
            password='testpass123',
            nickname='Webユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='webuser2',
            password='testpass123',
            nickname='Webユーザー2'
        )
        
        self.client = Client()
        
        # テスト用キャラクターシートを作成
        self.character1 = CharacterSheet.objects.create(
            user=self.user1,
            edition='6th',
            name='Webテスト探索者1',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        self.character2 = CharacterSheet.objects.create(
            user=self.user2,
            edition='7th',
            name='Webテスト探索者2',
            age=30,
            str_value=60,
            con_value=65,
            pow_value=70,
            dex_value=75,
            app_value=80,
            siz_value=55,
            int_value=85,
            edu_value=90
        )
    
    def test_character_list_view_public_access(self):
        """キャラクター一覧ビュー - 全ユーザのキャラクター表示テスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 200)
        
        # 両方のキャラクターが表示されることを確認
        self.assertContains(response, 'Webテスト探索者1')
        self.assertContains(response, 'Webテスト探索者2')
    
    def test_character_detail_view_public_access(self):
        """キャラクター詳細ビュー - 他ユーザーのキャラクター参照テスト"""
        self.client.force_login(self.user1)
        
        # user2のキャラクターを参照
        response = self.client.get(f'/accounts/character/{self.character2.id}/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'Webテスト探索者2')
        self.assertContains(response, '7版')
    
    def test_character_edit_view_owner_only(self):
        """キャラクター編集ビュー - 作成者のみアクセス可能テスト"""
        # 作成者はアクセス可能
        self.client.force_login(self.user1)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 200)
        
        # 他ユーザーはアクセス不可
        self.client.force_login(self.user2)
        response = self.client.get(f'/accounts/character/{self.character1.id}/edit/')
        self.assertEqual(response.status_code, 404)
    
    def test_character_new_view(self):
        """新規キャラクター作成ビューテスト"""
        self.client.force_login(self.user1)
        
        response = self.client.get('/accounts/character/new/')
        self.assertEqual(response.status_code, 200)
        
        self.assertContains(response, 'キャラクターシート作成')
        self.assertContains(response, 'エディションを選択')
    
    def test_character_creation_forms_access(self):
        """版別キャラクター作成フォームアクセステスト"""
        self.client.force_login(self.user1)
        
        # 6版作成フォーム
        response = self.client.get('/accounts/character/create/6th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '6版')
        
        # 7版作成フォーム
        response = self.client.get('/accounts/character/create/7th/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '7版')
    
    def test_unauthenticated_web_access_redirect(self):
        """未認証Webアクセスリダイレクトテスト"""
        # ログインページにリダイレクトされる
        response = self.client.get('/accounts/character/list/')
        self.assertEqual(response.status_code, 302)
        
        response = self.client.get(f'/accounts/character/{self.character1.id}/')
        self.assertEqual(response.status_code, 302)


class CharacterSheetIntegrationTestCase(TestCase):
    """キャラクターシート機能統合テスト"""
    
    def setUp(self):
        self.user1 = User.objects.create_user(
            username='integrationuser1',
            password='testpass123',
            nickname='統合テストユーザー1'
        )
        self.user2 = User.objects.create_user(
            username='integrationuser2',
            password='testpass123',
            nickname='統合テストユーザー2'
        )
    
    def test_complete_character_lifecycle(self):
        """完全なキャラクターライフサイクルテスト"""
        api_client = APIClient()
        api_client.force_authenticate(user=self.user1)
        
        # 1. キャラクター作成
        character_data = {
            'edition': '6th',
            'name': 'ライフサイクルテスト探索者',
            'player_name': 'テストプレイヤー',
            'age': 25,
            'gender': '男性',
            'occupation': '私立探偵',
            'str_value': 65,
            'con_value': 70,
            'pow_value': 75,
            'dex_value': 80,
            'app_value': 60,
            'siz_value': 65,
            'int_value': 85,
            'edu_value': 80
        }
        
        response = api_client.post(
            '/api/accounts/character-sheets/',
            data=json.dumps(character_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        character_id = response.json()['id']
        
        # 2. 技能追加
        skill_data = {
            'skill_name': '図書館',
            'base_value': 25,
            'occupation_points': 50,
            'interest_points': 0,
            'other_points': 0,
            'current_value': 75
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/skills/',
            data=json.dumps(skill_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 3. 装備追加
        equipment_data = {
            'item_type': 'weapon',
            'name': 'ピストル',
            'damage': '1d10',
            'range': '15m',
            'ammo': 6
        }
        
        response = api_client.post(
            f'/api/accounts/character-sheets/{character_id}/equipment/',
            data=json.dumps(equipment_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        # 4. 他ユーザーから参照可能かテスト
        api_client.force_authenticate(user=self.user2)
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        data = response.json()
        self.assertEqual(data['name'], 'ライフサイクルテスト探索者')
        self.assertEqual(len(data['skills']), 1)
        self.assertEqual(len(data['equipment']), 1)
        
        # 5. 他ユーザーから編集試行（失敗）
        update_data = {'name': '変更しようとした名前'}
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 6. 作成者がバージョン作成
        api_client.force_authenticate(user=self.user1)
        response = api_client.post(f'/api/accounts/character-sheets/{character_id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        version_data = response.json()
        self.assertEqual(version_data['version'], 2)
        self.assertEqual(version_data['parent_sheet'], character_id)
        
        # 7. バージョン履歴確認
        response = api_client.get(f'/api/accounts/character-sheets/{character_id}/versions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        versions = response.json()
        self.assertEqual(len(versions), 2)  # オリジナル + バージョン2
    
    def test_cross_user_permission_matrix(self):
        """ユーザー間権限マトリックステスト"""
        # user1のキャラクター作成
        character = CharacterSheet.objects.create(
            user=self.user1,
            edition='7th',
            name='権限テスト探索者',
            age=25,
            str_value=65,
            con_value=70,
            pow_value=75,
            dex_value=80,
            app_value=60,
            siz_value=65,
            int_value=85,
            edu_value=80
        )
        
        api_client = APIClient()
        
        # user2の権限テスト
        api_client.force_authenticate(user=self.user2)
        
        # 参照 - 成功
        response = api_client.get(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
        # 更新 - 失敗
        response = api_client.patch(
            f'/api/accounts/character-sheets/{character.id}/',
            data=json.dumps({'name': '変更試行'}),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # 削除 - 失敗
        response = api_client.delete(f'/api/accounts/character-sheets/{character.id}/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        
        # バージョン作成 - 失敗
        response = api_client.post(f'/api/accounts/character-sheets/{character.id}/create_version/')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


if __name__ == '__main__':
    import django
    import os
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'arkham_nexus.settings')
    django.setup()
    
    from django.test.utils import get_runner
    from django.conf import settings
    
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["accounts.test_character_sheets"])
        character = CharacterSheet.objects.create(
            user=self.user,
            edition='7th',
            name='削除テスト',
            age=25,
            str_value=60, con_value=60, pow_value=60, dex_value=60,
            app_value=60, siz_value=60, int_value=60, edu_value=60
        )
        
        # 関連データ作成
        CharacterSheet7th.objects.create(
            character_sheet=character,
            luck_points=60
        )
        
        CharacterSkill.objects.create(
            character_sheet=character,
            skill_name='図書館',
            base_value=20
        )
        
        CharacterEquipment.objects.create(
            character_sheet=character,
            item_type='item',
            name='懐中電灯'
        )
        
        character_id = character.id
        
        # キャラクター削除
        character.delete()
        
        # 関連データも削除されているか確認
        self.assertFalse(CharacterSheet7th.objects.filter(character_sheet_id=character_id).exists())
        self.assertFalse(CharacterSkill.objects.filter(character_sheet_id=character_id).exists())
        self.assertFalse(CharacterEquipment.objects.filter(character_sheet_id=character_id).exists())